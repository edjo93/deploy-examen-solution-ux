{"version":3,"sources":["components/formulario.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","e","console","log","target","value","name","className","this","props","titulo","onChange","handleTextArea","id","rows","placeholder","class","htmlFor","type","Component","array","App","state","tags","map","registro","i","etiquetas","texto","fecha","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAoCeA,G,mLAhCCC,GACdC,QAAQC,IAAIF,EAAEG,OAAOC,MAAMJ,EAAEG,OAAOE,Q,+BAQpC,OAEC,8BACC,wBAAIC,UAAU,aAAd,IAA4BC,KAAKC,MAAMC,OAAvC,MACO,yBAAKH,UAAU,cAEf,8BAAUD,KAAK,SAASC,UAAU,eAAeI,SAAWH,KAAKI,eAAgBC,GAAG,8BAA8BC,KAAK,IAAIC,YAAY,8BAEvI,yBAAKC,MAAM,cACf,2BAAQC,QAAQ,0BAChB,2BAAON,SAAWH,KAAKI,eAAgBN,KAAK,WAAWY,KAAK,OAAOF,MAAM,eAAeH,GAAG,wBAAwBE,YAAY,kDAI7H,4BAAQG,KAAK,SAASX,UAAU,mBAAhC,uB,GAzBgBY,c,OCIzBjB,QAAQC,IAAIiB,K,IAmEGC,E,kDAhEb,aAAc,IAAD,8BACX,gBACKC,MAAO,CAEVF,WAJS,E,qDAWX,IAAMG,EAAKf,KAAKc,MAAMF,MAAMI,KAAI,SAACC,EAAUC,GACzC,OAEE,yBAAKnB,UAAW,qBAEd,yBAAKA,UAAW,aAEd,yBAAKA,UAAU,eACb,wBAAIM,GAAG,iBAAiBY,EAASE,YAGnC,yBAAKpB,UAAU,aACb,2BACGkB,EAASG,OAIZ,2BACGH,EAASI,aAiBtB,OACE,yBAAKtB,UAAU,OAEb,kBAAC,EAAD,CAAYG,OAAS,YAErB,yBAAKH,UAAU,aACb,yBAAKA,UAAU,aACZgB,S,GAtDKJ,aCIEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iBCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.28222e16.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Formulario extends Component{\r\n\t\r\n\thandleTextArea(e){\r\n\t\tconsole.log(e.target.value,e.target.name)\r\n\r\n\t}\r\n\r\n\r\n\r\n\trender(){\r\n\r\n\t\treturn(\r\n\r\n\t\t\t<form>\r\n\t\t\t\t<h1 className=\"display-4\"> {this.props.titulo}  </h1>\r\n\t          <div className=\"form-group\">\r\n\t          \r\n\t          <textarea name=\"apunte\" className=\"form-control\" onChange ={this.handleTextArea} id=\"exampleFormControlTextarea1\" rows=\"3\" placeholder=\"Que quieres guardar hoy?\"></textarea>\r\n\t          </div>\r\n\t          <div class=\"form-group\">\r\n\t\t\t    <label  htmlFor=\"formGroupExampleInput\"></label>\r\n\t\t\t    <input onChange ={this.handleTextArea} name=\"etiqueta\" type=\"text\" class=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"etiqueta tus apuntes para encontrarlos luego\" />\r\n\t\t\t  </div>\r\n\r\n\t          \r\n\t        <button type=\"button\" className=\"btn btn-success\">Guardar apunte</button>\r\n\t        </form>\r\n\r\n\t\t)\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default Formulario;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Formulario from \"./components/formulario.js\"\r\n\r\nimport {array} from  \"./registros.json\"\r\nconsole.log(array)\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state ={\r\n\r\n      array\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n\r\n    const tags=this.state.array.map((registro, i)=> {\r\n      return (\r\n\r\n        <div className= \"col-lg-4 col-md-6\">\r\n          \r\n          <div className= \"card mt-4\">\r\n            \r\n            <div className=\"card-header\">\r\n              <h2 id=\"text_etiqueta\">{registro.etiquetas}</h2>\r\n\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <p>\r\n                {registro.texto}\r\n                \r\n\r\n              </p>\r\n              <p>\r\n                {registro.fecha}\r\n                \r\n\r\n              </p>  \r\n\r\n            </div>\r\n            \r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n      )\r\n\r\n\r\n    })\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        \r\n        <Formulario titulo = \"APEL.io\"/>\r\n        \r\n        <div className=\"container\">\r\n          <div className=\"row  mt-4\">\r\n            {tags}  \r\n          </div>\r\n            \r\n        </div>\r\n        \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}